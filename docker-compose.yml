version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: gifs-postgres
    environment:
      POSTGRES_DB: gifs_logistics
      POSTGRES_USER: gifs_user
      POSTGRES_PASSWORD: gifs_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gifs_user -d gifs_logistics"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gifs-network

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: gifs-backend
    environment:
      DATABASE_URL: postgresql://gifs_user:gifs_password@postgres:5432/gifs_logistics
      PORT: 8080
      NODE_ENV: production
      ALLOWED_ORIGIN: http://localhost:3000
      RAG_SIMILARITY_THRESHOLD: 0.3
    env_file:
      - backend/.env
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - gifs-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gifs-frontend
    environment:
      VITE_API: http://localhost:8080
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - gifs-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  gifs-network:
    driver: bridge
